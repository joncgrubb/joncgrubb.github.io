<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Jonathan Grubb</title>
        <description>Jonathan Grubb - </description>
        <link>http://www.joncgrubb.com</link>
        <atom:link href="http://www.joncgrubb.com/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Mon, 02 Oct 2017 12:56:37 -0400</lastBuildDate>
        <pubDate>Mon, 02 Oct 2017 12:56:37 -0400</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Using Heroku to Host Your Apps</title>
                <description>&lt;p&gt;
This article will assume you have the basics of building some type
of application or web page that you'd like to be available to the whole
of the internet. You just need a place to store it. Maybe it's a small
project like my calculator or tic-tac-toe built with Javascript, or maybe
something a bit more. It really doesn't matter, as what we'll cover here
is getting what you need to deploy your app to Heroku.
&lt;/p&gt;
&lt;p&gt;

Heroku is a free service that will allow you to store up to 5 apps, with 
more support and app slots available for a small fee. For now we will
focus on the free stuff, who doesn't love free?!
&lt;/p&gt;
&lt;p&gt;

First, you'll need to travel on over to the Heroku website and set up your
account.
&lt;/p&gt;
&lt;a href=&quot;https://www.heroku.com&quot;&gt;Heroku&lt;/a&gt;
&lt;p&gt;

&lt;br&gt;	
Next you will need to have a local git repo with at bare minimum an index.html
file stored within it for Heroku to serve your app to the wilds of the internet.
&lt;/p&gt;
&lt;p&gt;
	
If you don't already have this repo stored on Github, now is the time to do so.
Create a new repo on Github, click the green Clone or Download button and copy
the web url listed below it.
&lt;/p&gt;
&lt;p&gt;
	
Open terminal and navigate to your repo directory, for the sake of this article
my repo is named &quot;my-example-app&quot;. Set your remote with the copied url:
&lt;/p&gt;
&lt;code&gt;git remote https://github.com/username/my-example-app&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;	
Create an index.js file so Heroku will know what to do:
&lt;/p&gt;
&lt;code&gt;touch index.js&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;
Let's create a .gitignore file too, there are some items we will be creating
that we don't need to push to Github or Heroku:
&lt;/p&gt;
&lt;code&gt;touch .gitignore&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;	
And one more, a Procfile for Heroku, note there is no file extension, and capitalization is important:
&lt;/p&gt;
&lt;code&gt;touch Procfile&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;	
Open your text editor of choice and lets populate these files with what they need.
Inside index.js, copy the following and save:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var express = require('express');
var app = express();
var port = process.env.PORT || 3000;

app.use(express.static(__dirname + '/app/'));

app.listen(port, function() {
console.log('I am listening on port 3000!');
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	
&lt;br&gt;
Basically this tells Heroku we'll be using an Express framework for node.js to
run our application. The port option is so you can open a local copy of the app
in your browser if you so choose, good for working on styling options, etc. Although you'd probably be better off installing &lt;bold&gt;live-server&lt;/bold&gt; golbally with &lt;bold&gt;npm&lt;/bold&gt; as it will do live reloads of the page as you edit and save files.
&lt;/p&gt;
&lt;p&gt;
	
An important note about line 5 of our index.js, the app.use line. The portion containing /app/ will be the directory that your application's index.html lives. This needs to be edited accordingly. For example, if your index.hmtl is in the root directory of your repo a single / would suffice. If it's located in a directory named &lt;bold&gt;dist&lt;/bold&gt; then /app/ would need to be changed to /dist/
&lt;/p&gt;
&lt;p&gt;
	
Now we'll add some bits into the .gitignore file. This will prevent the files we are about to install from being pushed to Github and Heroku in the near future:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.DS_Store
node_modules
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;

&lt;br&gt;	
Now lets add a single line to the Procfile, this is basically a script that tells node to execute our index.js file:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web: node index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;

&lt;br&gt;	
Once again an important note. This single line expects index.js to be located in the root directory of your project, in my case &lt;bold&gt;my-example-app&lt;/bold&gt;. If you move the index.js file to a subdirectory this line will need to be edited to reflect that change. For example if you moved it to your &lt;bold&gt;app&lt;/bold&gt; directory, this line would need to read &lt;/bold&gt;web: node app/index.js&lt;/bold&gt;
&lt;/p&gt;
&lt;p&gt;
	
NPM time! If you dont have npm installed there are plenty of helpful articles online explaining the install process. NPM is a package manager for JavaScript and makes installing things we regularly need a painless process. It is required here: &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
	
Now lets install some stuff! In terminal, once again in the root directory of your app repo, type the following:
&lt;/p&gt;
&lt;code&gt;npm init&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;
Once started you will be asked to reply to some questions, you may skip them by hitting enter or answer them so your package.json that NPM creates has relevant information in it.
Now that NPM is initialized, lets install express. Type the following in terminal:
&lt;/p&gt;
&lt;code&gt;npm install express --save&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;	
Time to once again hit the Heroku website. Under Personal Apps tab, click the &lt;bold&gt;New&lt;/bold&gt; button. You'll be required to specify a name and choose a region. Names for Heroku apps are first come - first serve, so if prompted that the name is taken simply pick something else! This name will soon be part of the url used to access our deployed application!
&lt;/p&gt;
&lt;p&gt;
	
After creating the app, if not already, navigate to your newly created app in Personal Apps tab. Open the &lt;bold&gt;Deploy&lt;/bold&gt; tab and scroll to the bottom and copy the line below &quot;Existing Git Repo&quot;. Note that there is a $ in this line, don't copy that or it wont work, that's just letting you know to copy/paste this line into terminal.
&lt;/p&gt;
&lt;p&gt;
	
We're so close now! Just run your normal git commands to add, commit and push your added-to repo:
&lt;/p&gt;
&lt;code&gt;git add .&lt;br&gt;&lt;/code&gt;
&lt;code&gt;git commit -m &quot;your commit message goes here&quot;&lt;br&gt;&lt;/code&gt;
&lt;code&gt;git push origin master&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;	
Now for the Heroku portion. Pushing to Heroku works almost exactly like pushing to Github, and is therefor extremely easy!
&lt;/p&gt;
&lt;code&gt;git push heroku master&lt;/code&gt;
&lt;p&gt;

&lt;br&gt;	
That's it! You can watch as your application gets built and deployed in the terminal, and sans any build errors you are now on your way to a web app! If there are build errors, be sure to check the Logs section of your application on the Heroku site and note any build errors that may be present in Terminal for googling solutions.
&lt;/p&gt;</description>
                <link>http://www.joncgrubb.com/2017/09/Using-Heroku-to-Host-Your-Apps.html</link>
                <guid>http://www.joncgrubb.com/2017/09/Using-Heroku-to-Host-Your-Apps</guid>
                <pubDate>Wed, 27 Sep 2017 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>First Week Complete!</title>
                <description>&lt;ul&gt;
	&lt;li&gt;- Command line&lt;/li&gt;
	&lt;li&gt;- Git&lt;/li&gt;
	&lt;li&gt;- Github&lt;/li&gt;
	&lt;li&gt;- Github Pages&lt;/li&gt;
	&lt;li&gt;- HTML&lt;/li&gt;
	&lt;li&gt;- CSS&lt;/li&gt;
	&lt;li&gt;- node&lt;/li&gt;
	&lt;li&gt;- npm&lt;/li&gt;
	&lt;li&gt;- Bootstrap&lt;/li&gt;
	&lt;li&gt;- SASS&lt;/li&gt;
	&lt;li&gt;- Jekyll&lt;/li&gt;
	&lt;li&gt;- Gulp&lt;/li&gt;
	&lt;li&gt;- Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;

That would be 13 technologies introduced in just the first week! Whew. 
Thankfully I grew up on DOS machines and command line has continued to
be useful for troubleshooting on Windows machines ever since, so using
the command line on a UNIX system was basically just reconditioning my
brain for the difference in commands. Really, the same goes for HTML and
CSS. Both were technologies I dabbled with for fun growing up and never
really forgot, just like riding a bike! The rest, however, were going to
have to be learned... and quickly.
&lt;/p&gt;
&lt;p&gt;

At first it seemed crazy to me that our instructors would introduce new
technologies every single day while I was still trying to wrap my
head around what we had learned an hour ago. This is where that &quot;learning
how to learn&quot; phrase really came into play. All of this tech, while new to
me, would make things easier for me in the long run. For example, that 
simple little website I set up for prework and spent literal &lt;i&gt;days&lt;/i&gt; 
fiddling with CSS elements on would have taken me minutes after learning
more about Bootstrap and SASS, not to mention setting up a Gulp workflow
to automate repetitive tasks (and its built on JavaScript! I got my
intro to JS without even realizing it!).
&lt;/p&gt;

&lt;p&gt;

We set up package managers like Homebrew and npm to help us get started
down this new path of becoming a full stack web developer. We learned
about node and hosting our apps on Heroku. We set up our homepages (yes, 
the one you're visiting right now!) with Github Pages. By the end of 
the week I was exhausted, but it wasn't until I had some time to reflect
that I realized exactly &lt;i&gt;why&lt;/i&gt; so much got crammed into the first week.
We needed it. I needed it. All of it. There has not been a single piece of 
tech that we covered the first week that I didn't need.
&lt;/p&gt;

&lt;p&gt;
Here's to next week. Bring it on. I'm ready for more!
&lt;/p&gt;</description>
                <link>http://www.joncgrubb.com/2017/09/First-Week-Complete!.html</link>
                <guid>http://www.joncgrubb.com/2017/09/First-Week-Complete!</guid>
                <pubDate>Sun, 24 Sep 2017 00:00:00 -0400</pubDate>
        </item>

        <item>
                <title>The Start of Bootcamp</title>
                <description>&lt;p&gt;
Joining a bootcamp for web development has been something I've thought about
in the past and, somehow, just never really got around to looking into, let
alone applying for. That all changed about 3 months ago. I had recently moved
back to Central Kentucky after about a year of work in the automotive
industry in Nasville, TN and to say I was glad to be home would be the
understatement of a lifetime. Little did I know just how quickly things
would progress once I stumbled upon the Awesome Inc website randomly one day.
&lt;/p&gt;
&lt;p&gt;

The application process was &lt;i&gt;extremely&lt;/i&gt; thorough, consisting of multiple
challenges (some beginner coding related, others more of a thought
process exercise) that had to be completed for a chance at acceptance
into the program. I had already completed my application process the
day of the open house available to the public about 2 months prior
to the planned start date of the bootcamp, and had scheduled my interview
for that same day.
&lt;/p&gt;

&lt;p&gt;
	
The interview was actually really fun. It was set up just like any job
interview I've ever been to, but the questions asked got a little more
personal than in my previous experiences. It seemed the team at Awesome
Inc University didn't just want capable students, they were also looking
for individuals that wanted to make a difference. Besides the questions
there was also a technical portion which involved playing a game on a
tablet called Lightbot. It seemed strange to me at first until I realized
that the game relies on you to interperet the landscape, plan accordingly
and then execute your moves to be successful, an ability I have come to
realize is extremely important for bootcamp. I was confident, but with 
only 10-15 people being selected for the program, I was extremely humble 
about my chances of actually getting in.
&lt;/p&gt;

&lt;p&gt;

Congratulations! That was the first word of the email I received roughly a month
before the bootcamp start date. I remember opening the email and being too afraid
to actually scroll down to see what was written for at least 5 minutes. 
The next month consisted of completing pre-work challenges, watching video
content, and generally familiarizing myself with some of the more commonly used
current technologies associated with web development (or refamiliarizing myself
in the case of HTML and CSS). The prework was much more challenging than those
from the application process and in the end I feel they were designed to 
introduce all of us to the concept on &quot;learning how to learn&quot;. It may not
sound like that big of a deal, but web development and technology in general
is in a constant state of Kaizen (or continuous improvement, I can thank
Toyota Motor Manufacturing for knowing that one) and requires developers to
always be searching for or creating new and easier ways to perform the task
at hand.
&lt;/p&gt;

&lt;p&gt;
I'll cover what my first week was like in my next post. It would be putting
it &lt;i&gt;very&lt;/i&gt; lightly to say that the pre-work was designed so we could all
&quot;hit the ground running&quot; the first week, but more on that next time!
&lt;/p&gt;</description>
                <link>http://www.joncgrubb.com/2017/09/The-Start-Of-Bootcamp.html</link>
                <guid>http://www.joncgrubb.com/2017/09/The-Start-Of-Bootcamp</guid>
                <pubDate>Sat, 23 Sep 2017 00:00:00 -0400</pubDate>
        </item>


</channel>
</rss>
